/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['actor.js']) {
  _$jscoverage['actor.js'] = [];
  _$jscoverage['actor.js'][1] = 0;
  _$jscoverage['actor.js'][8] = 0;
  _$jscoverage['actor.js'][11] = 0;
  _$jscoverage['actor.js'][19] = 0;
  _$jscoverage['actor.js'][20] = 0;
  _$jscoverage['actor.js'][28] = 0;
  _$jscoverage['actor.js'][34] = 0;
  _$jscoverage['actor.js'][35] = 0;
  _$jscoverage['actor.js'][43] = 0;
  _$jscoverage['actor.js'][44] = 0;
  _$jscoverage['actor.js'][56] = 0;
  _$jscoverage['actor.js'][57] = 0;
  _$jscoverage['actor.js'][68] = 0;
  _$jscoverage['actor.js'][69] = 0;
  _$jscoverage['actor.js'][70] = 0;
  _$jscoverage['actor.js'][71] = 0;
  _$jscoverage['actor.js'][73] = 0;
  _$jscoverage['actor.js'][84] = 0;
  _$jscoverage['actor.js'][85] = 0;
  _$jscoverage['actor.js'][86] = 0;
  _$jscoverage['actor.js'][87] = 0;
  _$jscoverage['actor.js'][89] = 0;
  _$jscoverage['actor.js'][98] = 0;
  _$jscoverage['actor.js'][99] = 0;
  _$jscoverage['actor.js'][100] = 0;
  _$jscoverage['actor.js'][110] = 0;
  _$jscoverage['actor.js'][111] = 0;
  _$jscoverage['actor.js'][112] = 0;
  _$jscoverage['actor.js'][113] = 0;
  _$jscoverage['actor.js'][115] = 0;
  _$jscoverage['actor.js'][127] = 0;
  _$jscoverage['actor.js'][128] = 0;
  _$jscoverage['actor.js'][129] = 0;
  _$jscoverage['actor.js'][130] = 0;
  _$jscoverage['actor.js'][134] = 0;
}
_$jscoverage['actor.js'][1]++;
"use strict";
_$jscoverage['actor.js'][8]++;
var _ = require("./utils");
_$jscoverage['actor.js'][11]++;
var Actor = (function () {
});
_$jscoverage['actor.js'][19]++;
Actor.prototype.id = (function () {
  _$jscoverage['actor.js'][20]++;
  return this._id;
});
_$jscoverage['actor.js'][28]++;
Actor.prototype.connect = (function () {
});
_$jscoverage['actor.js'][34]++;
Actor.prototype.defaultListener = (function (msg) {
  _$jscoverage['actor.js'][35]++;
  console.log(this._id + ": Ooops! " + msg._id + ", " + msg.channel + ", " + msg.body);
});
_$jscoverage['actor.js'][43]++;
Actor.prototype.on_in = (function (msg) {
  _$jscoverage['actor.js'][44]++;
  console.log(this._id + ": _in message " + msg._id + ", " + msg.channel);
});
_$jscoverage['actor.js'][56]++;
Actor.prototype.receive = (function (msg) {
  _$jscoverage['actor.js'][57]++;
  (this._listeners[msg.channel] || this.defaultListener).call(this, msg);
});
_$jscoverage['actor.js'][68]++;
Actor.prototype.sub = (function (channel, listener) {
  _$jscoverage['actor.js'][69]++;
  this._listeners[channel] = listener;
  _$jscoverage['actor.js'][70]++;
  if (this.hub.subscribe(channel, this)) {
    _$jscoverage['actor.js'][71]++;
    return true;
  }
  _$jscoverage['actor.js'][73]++;
  return false;
});
_$jscoverage['actor.js'][84]++;
Actor.prototype.multiSub = (function (pattern, listener) {
  _$jscoverage['actor.js'][85]++;
  var channels = this.hub.multiSub(pattern, [this]);
  _$jscoverage['actor.js'][86]++;
  for (var c in channels) {
    _$jscoverage['actor.js'][87]++;
    this._listeners[channels[c]] = listener;
}
  _$jscoverage['actor.js'][89]++;
  return channels;
});
_$jscoverage['actor.js'][98]++;
Actor.prototype.unsub = (function (channel) {
  _$jscoverage['actor.js'][99]++;
  this.hub.unsubscribe(channel, this);
  _$jscoverage['actor.js'][100]++;
  this._listeners[channel] = undefined;
});
_$jscoverage['actor.js'][110]++;
Actor.prototype.multiUnsub = (function (pattern) {
  _$jscoverage['actor.js'][111]++;
  var channels = this.hub.multiUnsub(pattern, [this]);
  _$jscoverage['actor.js'][112]++;
  for (var c in channels) {
    _$jscoverage['actor.js'][113]++;
    this._listeners[channels[c]] = undefined;
}
  _$jscoverage['actor.js'][115]++;
  return channels;
});
_$jscoverage['actor.js'][127]++;
Actor.prototype.pub = (function (channel, body, options) {
  _$jscoverage['actor.js'][128]++;
  var msg = _.createMessage(channel, body, options);
  _$jscoverage['actor.js'][129]++;
  msg._id = this._id + "#" + this._msgCount++;
  _$jscoverage['actor.js'][130]++;
  return this.hub.publish(msg, this);
});
_$jscoverage['actor.js'][134]++;
exports = module.exports = Actor;
_$jscoverage['actor.js'].source = ["'use strict'","/**"," * Module dependencies."," */","","//var profiler = require('v8-profiler');"," ","var _ = require('./utils');","","","var Actor = function () {}","","/**"," * Getter for _id"," *"," * @returns {string} _id"," */","","Actor.prototype.id = function ()  {","  return this._id;","}","","/**"," * Override it to do initial subscribes"," */","","","Actor.prototype.connect = function()  {}","","/**"," * Default listener. logs unknown message"," */","","Actor.prototype.defaultListener = function (msg)  {","  console.log(this._id + ': Ooops! ' + msg._id + ', ' + msg.channel + ', ' + msg.body);","}","","/**"," * Default listener for personal messages"," */","","","Actor.prototype.on_in = function (msg)  {","  console.log(this._id + ': _in message ' + msg._id + ', ' + msg.channel);","}","","/**"," * Recieves message, adds it to the queue and dispatches "," * it to corresponding listener."," * _listeners array should be defined in the inherited object"," *"," * @param {object} [msg] the message"," */","","","Actor.prototype.receive = function (msg) {","  (this._listeners[msg.channel] || this.defaultListener).call(this, msg);","}","","/**"," * Subscribes to the channel and bind listener to its messages"," *"," * @param {string} [channel] the channel"," * @param {function} [listener] the listener"," * @returns {true|false} success|failure"," */ ","","Actor.prototype.sub = function (channel, listener)  {","  this._listeners[channel] = listener;","  if (this.hub.subscribe (channel, this))  {","    return true;","  }","  return false;","}","","/**"," * Subscribes to all channels matching pattern"," *"," * @param {RegExp} [pattern] contains regular expression"," * @param {function} [listener] the listener"," * @returns {array} matching channels"," */  ","","Actor.prototype.multiSub = function (pattern, listener)  {","  var channels = this.hub.multiSub (pattern, [this])","  for (var c in channels)  {","    this._listeners[channels[c]] = listener;","  }","  return channels;","}","","/**"," * Unsubscribes channel and unbinds listener"," *"," * @param {string} [channel] the channel"," */ ","","Actor.prototype.unsub = function (channel)  {","  this.hub.unsubscribe (channel, this);","  this._listeners[channel] = undefined;","}","","/**"," * Unsubscribes matching channels and unbinds listeners"," *"," * @param {string} [pattern] contains regular expression"," * @returns {array} matching channels"," */ ","","Actor.prototype.multiUnsub = function (pattern)  {","  var channels = this.hub.multiUnsub (pattern, [this])","  for (var c in channels)  {","    this._listeners[channels[c]] = undefined;","  }","  return channels;","}","","/**"," * Creates and publishes message"," *"," * @param {string} [channel] "," * @param {any} [body] message body"," * @param {object} [options] see createMessage"," * @returns {true|false} success|failure"," */ "," ","Actor.prototype.pub = function (channel, body, options) {","  var msg = _.createMessage(channel, body, options);","  msg._id = this._id + '#' + this._msgCount++;","  return this.hub.publish (msg, this);","}","","","exports = module.exports = Actor;"];
