/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['hub.js']) {
  _$jscoverage['hub.js'] = [];
  _$jscoverage['hub.js'][5] = 0;
  _$jscoverage['hub.js'][6] = 0;
  _$jscoverage['hub.js'][7] = 0;
  _$jscoverage['hub.js'][10] = 0;
  _$jscoverage['hub.js'][11] = 0;
  _$jscoverage['hub.js'][12] = 0;
  _$jscoverage['hub.js'][13] = 0;
  _$jscoverage['hub.js'][14] = 0;
  _$jscoverage['hub.js'][16] = 0;
  _$jscoverage['hub.js'][25] = 0;
  _$jscoverage['hub.js'][26] = 0;
  _$jscoverage['hub.js'][37] = 0;
  _$jscoverage['hub.js'][38] = 0;
  _$jscoverage['hub.js'][39] = 0;
  _$jscoverage['hub.js'][40] = 0;
  _$jscoverage['hub.js'][42] = 0;
  _$jscoverage['hub.js'][43] = 0;
  _$jscoverage['hub.js'][44] = 0;
  _$jscoverage['hub.js'][54] = 0;
  _$jscoverage['hub.js'][55] = 0;
  _$jscoverage['hub.js'][56] = 0;
  _$jscoverage['hub.js'][57] = 0;
  _$jscoverage['hub.js'][59] = 0;
  _$jscoverage['hub.js'][60] = 0;
  _$jscoverage['hub.js'][71] = 0;
  _$jscoverage['hub.js'][72] = 0;
  _$jscoverage['hub.js'][73] = 0;
  _$jscoverage['hub.js'][74] = 0;
  _$jscoverage['hub.js'][75] = 0;
  _$jscoverage['hub.js'][88] = 0;
  _$jscoverage['hub.js'][89] = 0;
  _$jscoverage['hub.js'][90] = 0;
  _$jscoverage['hub.js'][91] = 0;
  _$jscoverage['hub.js'][92] = 0;
  _$jscoverage['hub.js'][93] = 0;
  _$jscoverage['hub.js'][95] = 0;
  _$jscoverage['hub.js'][109] = 0;
  _$jscoverage['hub.js'][110] = 0;
  _$jscoverage['hub.js'][111] = 0;
  _$jscoverage['hub.js'][114] = 0;
  _$jscoverage['hub.js'][115] = 0;
  _$jscoverage['hub.js'][116] = 0;
  _$jscoverage['hub.js'][127] = 0;
  _$jscoverage['hub.js'][128] = 0;
  _$jscoverage['hub.js'][129] = 0;
  _$jscoverage['hub.js'][130] = 0;
  _$jscoverage['hub.js'][131] = 0;
  _$jscoverage['hub.js'][142] = 0;
  _$jscoverage['hub.js'][143] = 0;
  _$jscoverage['hub.js'][145] = 0;
  _$jscoverage['hub.js'][146] = 0;
  _$jscoverage['hub.js'][147] = 0;
  _$jscoverage['hub.js'][148] = 0;
  _$jscoverage['hub.js'][149] = 0;
  _$jscoverage['hub.js'][151] = 0;
  _$jscoverage['hub.js'][162] = 0;
  _$jscoverage['hub.js'][163] = 0;
  _$jscoverage['hub.js'][164] = 0;
  _$jscoverage['hub.js'][165] = 0;
  _$jscoverage['hub.js'][166] = 0;
  _$jscoverage['hub.js'][177] = 0;
  _$jscoverage['hub.js'][178] = 0;
  _$jscoverage['hub.js'][180] = 0;
  _$jscoverage['hub.js'][181] = 0;
  _$jscoverage['hub.js'][182] = 0;
  _$jscoverage['hub.js'][183] = 0;
  _$jscoverage['hub.js'][184] = 0;
  _$jscoverage['hub.js'][186] = 0;
  _$jscoverage['hub.js'][198] = 0;
  _$jscoverage['hub.js'][199] = 0;
  _$jscoverage['hub.js'][200] = 0;
  _$jscoverage['hub.js'][201] = 0;
  _$jscoverage['hub.js'][212] = 0;
  _$jscoverage['hub.js'][213] = 0;
  _$jscoverage['hub.js'][214] = 0;
  _$jscoverage['hub.js'][215] = 0;
  _$jscoverage['hub.js'][217] = 0;
  _$jscoverage['hub.js'][219] = 0;
  _$jscoverage['hub.js'][220] = 0;
  _$jscoverage['hub.js'][221] = 0;
  _$jscoverage['hub.js'][222] = 0;
  _$jscoverage['hub.js'][224] = 0;
  _$jscoverage['hub.js'][225] = 0;
  _$jscoverage['hub.js'][228] = 0;
  _$jscoverage['hub.js'][229] = 0;
  _$jscoverage['hub.js'][230] = 0;
  _$jscoverage['hub.js'][234] = 0;
  _$jscoverage['hub.js'][235] = 0;
  _$jscoverage['hub.js'][239] = 0;
  _$jscoverage['hub.js'][246] = 0;
  _$jscoverage['hub.js'][247] = 0;
  _$jscoverage['hub.js'][248] = 0;
  _$jscoverage['hub.js'][249] = 0;
  _$jscoverage['hub.js'][250] = 0;
  _$jscoverage['hub.js'][251] = 0;
  _$jscoverage['hub.js'][252] = 0;
  _$jscoverage['hub.js'][253] = 0;
  _$jscoverage['hub.js'][256] = 0;
  _$jscoverage['hub.js'][257] = 0;
  _$jscoverage['hub.js'][258] = 0;
  _$jscoverage['hub.js'][259] = 0;
  _$jscoverage['hub.js'][260] = 0;
  _$jscoverage['hub.js'][261] = 0;
  _$jscoverage['hub.js'][265] = 0;
  _$jscoverage['hub.js'][268] = 0;
}
_$jscoverage['hub.js'][5]++;
var uuid = require("node-uuid");
_$jscoverage['hub.js'][6]++;
var _ = require("../underscore")._;
_$jscoverage['hub.js'][7]++;
var createMessage = require("./utils").createMessage;
_$jscoverage['hub.js'][10]++;
var Hub = (function (name) {
  _$jscoverage['hub.js'][11]++;
  this._name = name.toString();
  _$jscoverage['hub.js'][12]++;
  this._id = this._name + uuid().slice(0, 4);
  _$jscoverage['hub.js'][13]++;
  this._msgCount = 0;
  _$jscoverage['hub.js'][14]++;
  this._ = {};
  _$jscoverage['hub.js'][16]++;
  this._._aux = {_openpub: true};
});
_$jscoverage['hub.js'][25]++;
Hub.prototype.id = (function () {
  _$jscoverage['hub.js'][26]++;
  return this._id;
});
_$jscoverage['hub.js'][37]++;
Hub.prototype.setupChannel = (function (channel, options) {
  _$jscoverage['hub.js'][38]++;
  if ("string" === typeof channel) {
    _$jscoverage['hub.js'][39]++;
    if (! this._[channel]) {
      _$jscoverage['hub.js'][40]++;
      this._[channel] = {};
    }
    _$jscoverage['hub.js'][42]++;
    this._[channel] = _.extend(this._[channel], options);
    _$jscoverage['hub.js'][43]++;
    return true;
  }
  else {
    _$jscoverage['hub.js'][44]++;
    return false;
  }
});
_$jscoverage['hub.js'][54]++;
Hub.prototype.deleteChannel = (function (channel) {
  _$jscoverage['hub.js'][55]++;
  if ("string" === typeof channel) {
    _$jscoverage['hub.js'][56]++;
    if (this._[channel]) {
      _$jscoverage['hub.js'][57]++;
      delete this._[channel];
    }
    _$jscoverage['hub.js'][59]++;
    return true;
  }
  else {
    _$jscoverage['hub.js'][60]++;
    return false;
  }
});
_$jscoverage['hub.js'][71]++;
Hub.prototype.allow = (function (actorId, action, channel) {
  _$jscoverage['hub.js'][72]++;
  if (this._[channel]) {
    _$jscoverage['hub.js'][73]++;
    if (! this._[channel][actorId]) {
      _$jscoverage['hub.js'][74]++;
      this._[channel][actorId] = {};
    }
    _$jscoverage['hub.js'][75]++;
    this._[channel][actorId][action] = true;
  }
});
_$jscoverage['hub.js'][88]++;
Hub.prototype.deny = (function (actorId, action, channel) {
  _$jscoverage['hub.js'][89]++;
  if (this._[channel] && ! this._[channel]["_open" + action]) {
    _$jscoverage['hub.js'][90]++;
    if (! this._[channel][actorId]) {
      _$jscoverage['hub.js'][91]++;
      this._[channel][actorId] = {};
    }
    _$jscoverage['hub.js'][92]++;
    this._[channel][actorId][action] = false;
    _$jscoverage['hub.js'][93]++;
    return true;
  }
  _$jscoverage['hub.js'][95]++;
  return false;
});
_$jscoverage['hub.js'][109]++;
Hub.prototype.authorize = (function (actorId, action, channel) {
  _$jscoverage['hub.js'][110]++;
  if (this._[channel]) {
    _$jscoverage['hub.js'][111]++;
    if (this._[channel]["_open" + action] || (this._[channel][actorId] && this._[channel][actorId][action])) {
      _$jscoverage['hub.js'][114]++;
      return true;
    }
  }
  _$jscoverage['hub.js'][115]++;
  this.pub("_aux", "Unauthorized " + action + " on " + channel + " by " + actorId);
  _$jscoverage['hub.js'][116]++;
  return false;
});
_$jscoverage['hub.js'][127]++;
Hub.prototype.subscribe = (function (channel, subscriber) {
  _$jscoverage['hub.js'][128]++;
  if (! this.authorize(subscriber.id(), "sub", channel)) {
    _$jscoverage['hub.js'][129]++;
    return false;
  }
  _$jscoverage['hub.js'][130]++;
  this._[channel][subscriber.id()].__handle__ = subscriber;
  _$jscoverage['hub.js'][131]++;
  return true;
});
_$jscoverage['hub.js'][142]++;
Hub.prototype.Psubscribe = (function (pattern, subscriber) {
  _$jscoverage['hub.js'][143]++;
  var matches = [];
  _$jscoverage['hub.js'][145]++;
  var p = new RegExp(pattern, "i");
  _$jscoverage['hub.js'][146]++;
  for (var t in this._) {
    _$jscoverage['hub.js'][147]++;
    if (p.test(t)) {
      _$jscoverage['hub.js'][148]++;
      if (this.subscribe(t, subscriber)) {
        _$jscoverage['hub.js'][149]++;
        matches.push(t);
      }
    }
}
  _$jscoverage['hub.js'][151]++;
  return matches;
});
_$jscoverage['hub.js'][162]++;
Hub.prototype.unsubscribe = (function (channel, subscriber) {
  _$jscoverage['hub.js'][163]++;
  if (channel in this) {
    _$jscoverage['hub.js'][164]++;
    delete this._[channel][subscriber.id()];
    _$jscoverage['hub.js'][165]++;
    return true;
  }
  else {
    _$jscoverage['hub.js'][166]++;
    return false;
  }
});
_$jscoverage['hub.js'][177]++;
Hub.prototype.Punsubscribe = (function (pattern, subscriber) {
  _$jscoverage['hub.js'][178]++;
  var matches = [];
  _$jscoverage['hub.js'][180]++;
  var p = new RegExp(channel, "i");
  _$jscoverage['hub.js'][181]++;
  for (var t in this) {
    _$jscoverage['hub.js'][182]++;
    if (p.test(t)) {
      _$jscoverage['hub.js'][183]++;
      if (this.unsubscribe(t, subscriber)) {
        _$jscoverage['hub.js'][184]++;
        matches.push(t);
      }
    }
}
  _$jscoverage['hub.js'][186]++;
  return matches;
});
_$jscoverage['hub.js'][198]++;
Hub.prototype.pub = (function (channel, body, options) {
  _$jscoverage['hub.js'][199]++;
  msg = createMessage(channel, body, options);
  _$jscoverage['hub.js'][200]++;
  msg._id = this.id() + "#" + this._msgCount++;
  _$jscoverage['hub.js'][201]++;
  return this.publish(msg, this);
});
_$jscoverage['hub.js'][212]++;
Hub.prototype.publish = (function (msg, publisher) {
  _$jscoverage['hub.js'][213]++;
  var publisherId = publisher.id();
  _$jscoverage['hub.js'][214]++;
  if (! this.authorize(publisherId, "pub", msg.channel)) {
    _$jscoverage['hub.js'][215]++;
    return false;
  }
  _$jscoverage['hub.js'][217]++;
  if (msg.answerMe) {
    _$jscoverage['hub.js'][219]++;
    var reChannel = "_re:" + msg._id;
    _$jscoverage['hub.js'][220]++;
    this.setupChannel(reChannel, {publisherId: {sub: true}});
    _$jscoverage['hub.js'][221]++;
    this.subscribe(reChannel, publisher);
    _$jscoverage['hub.js'][222]++;
    this._[reChannel].__re__ = true;
    _$jscoverage['hub.js'][224]++;
    that = this;
    _$jscoverage['hub.js'][225]++;
    setTimeout((function () {
  _$jscoverage['hub.js'][225]++;
  that.deleteChannel(reChannel);
}), msg.ttl? msg.ttl: 1000);
  }
  _$jscoverage['hub.js'][228]++;
  for (var s in this._[msg.channel]) {
    _$jscoverage['hub.js'][229]++;
    if (this._[msg.channel][s].__handle__) {
      _$jscoverage['hub.js'][230]++;
      this._[msg.channel][s].__handle__.recieve(msg);
    }
}
  _$jscoverage['hub.js'][234]++;
  if (this._[msg.channel].__re__) {
    _$jscoverage['hub.js'][235]++;
    this.deleteChannel(msg.channel);
  }
});
_$jscoverage['hub.js'][239]++;
Hub.prototype.recieve = Hub.prototype.publish;
_$jscoverage['hub.js'][246]++;
Hub.prototype.dump = (function (channel) {
  _$jscoverage['hub.js'][247]++;
  var dump = "";
  _$jscoverage['hub.js'][248]++;
  if (channel in this._) {
    _$jscoverage['hub.js'][249]++;
    dump += "### " + channel + " ###\n";
    _$jscoverage['hub.js'][250]++;
    for (var c in this._[channel]) {
      _$jscoverage['hub.js'][251]++;
      dump += "  " + c + ": " + this._[channel][c] + " \n";
      _$jscoverage['hub.js'][252]++;
      for (s in this._[channel][c]) {
        _$jscoverage['hub.js'][253]++;
        dump += "    " + s + ": " + this._[channel][c][s] + "\n";
}
}
  }
  else {
    _$jscoverage['hub.js'][256]++;
    for (var chan in this._) {
      _$jscoverage['hub.js'][257]++;
      dump += "### " + chan + " ###\n";
      _$jscoverage['hub.js'][258]++;
      for (var c in this._[chan]) {
        _$jscoverage['hub.js'][259]++;
        dump += "  " + c + ": " + this._[chan][c] + " \n";
        _$jscoverage['hub.js'][260]++;
        for (s in this._[chan][c]) {
          _$jscoverage['hub.js'][261]++;
          dump += "    " + s + ": " + this._[chan][c][s] + "\n";
}
}
}
  }
  _$jscoverage['hub.js'][265]++;
  return dump;
});
_$jscoverage['hub.js'][268]++;
exports = module.exports = Hub;
_$jscoverage['hub.js'].source = ["/**"," * Module dependencies."," */","","var uuid = require('node-uuid');","var _ = require('../underscore')._;","var createMessage = require('./utils').createMessage;","","","var Hub = function (name) {","  this._name = name.toString();","  this._id = this._name + uuid().slice(0,4);","  this._msgCount = 0;","  this._ = {};","  // Service channel","  this._._aux = {_openpub: true};","};","","/**"," * Getter for _id"," *"," * @returns {string} _id"," */","","Hub.prototype.id = function ()  {","  return this._id;","}","","/**"," * Creates and configures channel. If it already exists, only configures"," *"," * @param {string} [channel]"," * @param {object} [options] "," * @returns {bool} success?"," */","","Hub.prototype.setupChannel = function (channel, options)  {","  if ('string' === typeof channel)  {","    if (!this._[channel])  {","        this._[channel] = {};","    }","    this._[channel] = _.extend(this._[channel], options);","    return true;","  } else return false;","}","","/**"," * Deletes channel."," *"," * @param {string} [channel]"," * @returns {bool} success?"," */","","Hub.prototype.deleteChannel = function (channel)  {","  if ('string' === typeof channel)  {","    if (this._[channel])  {","        delete this._[channel];","    }","    return true;","  } else return false;","}","","/**"," * Allows actor to perform action on channel"," *"," * @param {string} [actorId]"," * @param {string} [action] pub or sub"," * @param {string} [channel]"," */","","Hub.prototype.allow = function (actorId, action, channel)  {","  if (this._[channel])  {","    if (!this._[channel][actorId])","      this._[channel][actorId] = {};","    this._[channel][actorId][action] = true;  ","  }","}","","/**"," * Denies actor to perform action on channel"," *"," * @param {string} [actorId]"," * @param {string} [action] pub or sub"," * @param {string} [channel]"," * @returns {bool} success?"," */","","Hub.prototype.deny = function (actorId, action, channel)  {","  if (this._[channel] &amp;&amp; !this._[channel]['_open' + action])  {","    if (!this._[channel][actorId])","      this._[channel][actorId] = {};","    this._[channel][actorId][action] = false;","    return true;","  } ","  return false;","}","","/**"," * Authorizes action. Allowed or denied actions are set in options parameter of"," * configureChannel(). Access rules are set only for individual actors. To create"," * roles or security groups use nested hubs. "," *"," * @param {string} [channel]"," * @param {string} [action] Pub or Sub"," * @param {string} [actorId] "," * @returns {bool} authorized?"," */","","Hub.prototype.authorize = function (actorId, action, channel)  {","  if (this._[channel])","    if (this._[channel]['_open' + action] ||","       (this._[channel][actorId] &amp;&amp;","        this._[channel][actorId][action]))","    return true;","  this.pub ('_aux', 'Unauthorized ' + action + ' on ' + channel + ' by ' + actorId);","  return false;","}","","/**"," * Subscribes to channel."," *"," * @param {string} [channel]"," * @param {object} [subscriber]"," * @returns {bool} success?"," */","","Hub.prototype.subscribe = function (channel, subscriber)  {","  if (!this.authorize(subscriber.id(), 'sub', channel))","    return false;","  this._[channel][subscriber.id()].__handle__ = subscriber;","  return true;","}","","/**"," * Subscribes to all channels, matching pattern."," *"," * @param {string} [pattern]"," * @param {object} [subscriber]"," * @returns {array} matching channels"," */"," ","Hub.prototype.Psubscribe = function (pattern, subscriber)  {","  var matches = [];","","  var p = new RegExp(pattern, 'i');","  for (var t in this._)  {","    if (p.test(t))  ","      if (this.subscribe(t, subscriber))","        matches.push(t);","  }","  return matches; ","}","","/**"," * Unsubscribes. Does not delete empty channel."," *"," * @param {string} [channel]"," * @param {object} [subscriber]"," * @returns {bool} success?"," */","","Hub.prototype.unsubscribe = function (channel, subscriber)  {","  if (channel in this)  {","    delete this._[channel][subscriber.id()];","    return true;","  } else return false","}","","/**"," * Unsubscribes channels matching pattern."," *"," * @param {string} [pattern]"," * @param {object} [subscriber]"," * @returns {array} matching channels"," */","  ","Hub.prototype.Punsubscribe = function (pattern, subscriber)  {","  var matches = [];","  ","  var p = new RegExp(channel, 'i');","  for (var t in this)  {","    if (p.test(t))  ","      if (this.unsubscribe(t, subscriber))","        matches.push(t);","  }","  return matches;","}","","/**"," * Creates and publishes message"," *"," * @param {string} [channel] "," * @param {any} [body] message body"," * @param {object} [options] see createMessage"," * @returns {true|false} success|failure"," */","","Hub.prototype.pub = function (channel, body, options) {","  msg = createMessage(channel, body, options);","  msg._id = this.id() + '#' + this._msgCount++;","  return this.publish (msg, this);","}","","/**"," * Publishes message"," *"," * @param {object} [message] "," * @param {object} [publisher] "," * @returns {true|false} success|failure"," */","","Hub.prototype.publish = function (msg, publisher) {","  var publisherId = publisher.id();","  if (!this.authorize(publisherId, 'pub', msg.channel))","    return false;","  // if message requires answer","  if (msg.answerMe)  {","    // create temp channel for it","    var reChannel = '_re:' + msg._id;","    this.setupChannel(reChannel, {publisherId: {sub: true}});","    this.subscribe (reChannel, publisher);","    this._[reChannel].__re__ = true;","    // and delete this channel after msg.ttl milliseconds, or 1 second if ttl is empty","    that = this;","    setTimeout (function () { that.deleteChannel(reChannel); }, msg.ttl ? msg.ttl : 1000);","  }","  // send message to all subscribers","  for (var s in this._[msg.channel])  {","    if (this._[msg.channel][s].__handle__)","      this._[msg.channel][s].__handle__.recieve(msg);","  }","  // if this message is an answer to one of previous messages, delete channel ","  // after sending","  if (this._[msg.channel].__re__)  ","    this.deleteChannel(msg.channel);","}","","// alias for interhub communication","Hub.prototype.recieve = Hub.prototype.publish;","","","/**"," * Dumps current state"," */","","Hub.prototype.dump = function (channel) {","  var dump = '';","  if (channel in this._)  {","  dump += '### ' + channel + ' ###\\n';","    for (var c in this._[channel])  {","      dump += '  ' + c + ': ' + this._[channel][c] + ' \\n';","      for (s in this._[channel][c])","        dump += '    ' + s + ': ' + this._[channel][c][s] + '\\n';","    }","  } else {","    for (var chan in this._)  {","      dump += '### ' + chan + ' ###\\n';","      for (var c in this._[chan])  {","        dump += '  ' + c + ': ' + this._[chan][c] + ' \\n';","        for (s in this._[chan][c])","          dump += '    ' + s + ': ' + this._[chan][c][s] + '\\n';","      }","    }","  }          ","  return dump;","}","","exports = module.exports = Hub;"];
